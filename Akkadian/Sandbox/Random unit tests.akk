# Namespace:    Hammurabi.Sandbox
# Summary:      A host of random unit tests
# Updated:      2012-10-19
# Author:       Michael Poulshock


# TEST OF DEPRECIATION RULES

# Idea is that the value of some asset depreciates over time.  Given a
# timeline of the depreciation percentage, what is the asset's value?

# Applicable depreciate rate, given the date the property was acquired
Tnum DepreciationRate(Tdate acquisitionDate) =
    DepreciationPercentage(years)
    
    Tnum years = YearsSinceAcquisitionOfProperty(acquisitionDate)
 
# Counts off the years since the date the property was acquired
Tnum YearsSinceAcquisitionOfProperty(Tdate acquisitionDate) =
    Time.IntervalsSince(acquisitionDate, acquisitionDate.AddYears(10), Time.IntervalType.Year)

# Example is from the MARCS depreciation rate for 5-year property
# using the half-year convention.    
Tnum DepreciationPercentage(Tnum year) =
    match year
    1 -> 0.2000
    2 -> 0.3200
    3 -> 0.1920
    4 -> 0.1152
    5 -> 0.1152
    6 -> 0.0576
    else Stub()
 
 
Test: Depreciation1
- Hammurabi.Sandbox.DepreciationRate(1999-01-01).AsOf(2003-03-03).Out =?= 0.1152

Test: Depreciation2
- Hammurabi.Sandbox.DepreciationRate(1999-01-01).AsOf(2010-03-03).Out =?= "Stub"


# ELAPSED TIME - PERFORMANCE ISSUES

# Extremely poor performance
Tbool TimeError1(Thing t) =
	(new Tbool(true)).RunningElapsedYears >= 5

# Poor performance	
Tbool TimeError2(Thing t) =
	(new Tbool(true)).ElapsedYearsInSlidingWindow(10, "Year") >= 7
	

# INTERVIEW SEQUENCE WITH |~ OPERATOR - NOT WORKING

##
Diagnosis: The |~ operator (^ in C#) does not short-circuit like
&& and ||.  Those operators cause AND and OR to ignore irrelevant
interview branches.  With |~ however, both Tbool inputs to that 
function are evaluated before the logic within the function is
applied.

Temporary fix: Use assumption rules where possible to stave off
investigations into irrelevant branches.

Needed long-term fix: Make Tvars into Func<Tvar> so they are invoked
lazily.
##

# Sequence fails - conclusions correct
# Only asks FamRel reverse if first FamRel test is true!
Tbool Test917d(Thing a, Thing b) =
	Fam.IsBiologicalParentOf(a,b) &
	Imm.IsUSNational(a)				# Adding this condition causes interview to ask FamRel in both directions!
	
# Interview sequence fails - conclusions correct
# Asks 918b when 918a has already been asked (unless rule has been proven)
Tbool Test918a(Thing a) =
	...
		TboolIn TestMethod918a(a) |~
		TboolIn TestMethod918b(a)
	&	# Same problem when this is |
	Imm.IsUSNational(a)


# INTERVIEW SEQUENCE WITH |~ OPERATOR - WORKING
	
Tbool AnotherMethod(Thing p) =
	TboolIn TestMethod101(p) |~
	TboolIn TestMethod102(p)

# Note: These tests validate the logic, not the interview sequence. But
#       that sequence was tested and is also working properly (2012-08-11).

Test: 171824320
- Thing p
- TestMethod101(p) = new Tbool(Hstate.Unstated)
- TestMethod102(p) = false
- Sandbox.AnotherMethod(p).TestOutput =?= "Time.DawnOf False "

Test: 580982293
- Thing p
- TestMethod101(p) = new Tbool(Hstate.Unstated)
- TestMethod102(p) = true
- Sandbox.AnotherMethod(p).TestOutput =?= "Time.DawnOf True "

Test: 288489417
- Thing p
- TestMethod101(p) = Tbool(?)
- TestMethod102(p) = Tbool(?)
- Sandbox.AnotherMethod(p).TestOutput =?= "Time.DawnOf Uncertain "

Test: 798236451
- Thing p
- TestMethod101(p) = false
- Sandbox.AnotherMethod(p).TestOutput =?= "Time.DawnOf False "

Test: 416036083
- Thing p
- TestMethod101(p) = true
- Sandbox.AnotherMethod(p).TestOutput =?= "Time.DawnOf True "


# PERIOD END VALUE

Test: PeriodEndVal1
- Thing p
- IsMarried(p) = {Time.DawnOf: false; 2012-05-02: true}
- Fam.IsMarried(p).PeriodEndVal(TheYear).TestOutput =?= "Time.DawnOf False 1/1/2012 12:00:00 AM True "

Test: PeriodEndVal2
- Thing p
- IsMarried(p) = true
- Fam.IsMarried(p).PeriodEndVal(TheYear).TestOutput =?= "Time.DawnOf True "

Test: PeriodEndVal3
- Thing p
- IsDeceased(p) = Tbool(?)
- Fam.IsDeceased(p).PeriodEndVal(TheYear).TestOutput =?= "Time.DawnOf Uncertain "

Test: PeriodEndVal4
- Thing p
- IsMarried(p) = {Time.DawnOf: false; 2012-03-11: true; 2012-05-02: false}
- Fam.IsMarried(p).PeriodEndVal(TheYear).TestOutput =?= "Time.DawnOf False "

Test: PeriodEndVal5
- Thing p
- IsMarried(p) = {Time.DawnOf: false; 2012-01-01: true}
- Fam.IsMarried(p).PeriodEndVal(TheYear).TestOutput =?= "Time.DawnOf False 1/1/2012 12:00:00 AM True "


# USE OF HIGHER-ORDER FUNCTIONS

# Turns out you can use a logical expression (and not just a function)
# as an argument in a higher-order rule such as Filter, Sum, Exists.	
Tnum LogicalExpressionInHigherOrderRule(Thing p) =
	Fam.SpousesOf(p).Filter(Age(_) < 65).Count

Test: 965821874
- Thing jim
- Things a
- SpousesOf(jim) = [[a]]
- DoB(a) = 1900-01-01
- Hammurabi.Sandbox.LogicalExpressionInHigherOrderRule(jim).AsOf(2000-01-01).Out =?= 0

Test: 825234342
- Thing jim
- Things a
- SpousesOf(jim) = [[a]]
- DoB(a) = 1979-01-01
- Hammurabi.Sandbox.LogicalExpressionInHigherOrderRule(jim).AsOf(2000-01-01).Out =?= 1	
	
	
# TVAR.SHIFT

Test: Shift1
- Thing p
- AnnualIncome(p) = {Time.DawnOf: 0; 2000-01-01: 100; 2001-01-01: 200}
- Econ.AnnualIncome(p).Shift(-1,TheYear).TestOutput =?= "Time.DawnOf 0 1/1/2001 12:00:00 AM 100 1/1/2002 12:00:00 AM 200 "

Test: Shift2
- Thing p
- AnnualIncome(p) = {Time.DawnOf: 0; 2000-01-01: 100; 2001-01-01: 200}
- Econ.AnnualIncome(p).Shift(0,TheYear).TestOutput =?= "Time.DawnOf 0 1/1/2000 12:00:00 AM 100 1/1/2001 12:00:00 AM 200 "

Test: Shift3
- Thing p
- AnnualIncome(p) = {Time.DawnOf: 0; 2000-01-01: 100; 2001-01-01: 200}
- Econ.AnnualIncome(p).Shift(2,TheYear).TestOutput =?= "Time.DawnOf 0 1/1/1998 12:00:00 AM 100 1/1/1999 12:00:00 AM 200 "

    
# UNIT TESTS FOR YEARDIFF, WEEKDIFF, DAYDIFF

# YearDiff

Test: YearDiff1
- YearDiff(2001-01-01, 2003-01-01).Out =?= 2 

Test: YearDiff2
- YearDiff(2001-01-01, 2001-01-01).Out =?= 0

Test: YearDiff3
- YearDiff(2000-01-01, 2010-01-01).Out =?= 10 

Test: YearDiff4
- YearDiff(new Tdate(Hstate.Stub), 2010-01-01).Out =?= "Stub"

Test: YearDiff5
- YearDiff(2000-01-02, 2010-01-01).Out =?= 9.997

Test: YearDiff6
- YearDiff(2000-01-01, 2000-01-02).Out =?= 0.003

Test: YearDiff7
- YearDiff(2000-02-29, 2004-02-29).Out =?= 4 

Test: YearDiff8
- YearDiff(2000-02-29, 2004-02-28).Out =?= 4

Test: YearDiff9
- YearDiff(2004-02-29, 2004-02-29).Out =?= 0

# WeekDiff

Test: WeekDiff1
- WeekDiff(2000-01-01, 2000-01-08).Out =?= 1

Test: WeekDiff2
- WeekDiff(2000-01-01, 2000-01-07).Out =?= 0.857

Test: WeekDiff3
- WeekDiff(2000-01-01, 2000-01-15).Out =?= 2
    
# DayDiff
    
Test: DayDiff1
- DayDiff(2001-01-01, 2001-01-02).Out =?= 1

Test: DayDiff2
- DayDiff(2001-01-01, 2001-01-08).Out =?= 7

Test: DayDiff3
- DayDiff(2001-01-01, 2001-01-01).Out =?= 0

Test: DayDiff4
- DayDiff(2000-01-01, 2010-01-01).Out =?= 3653

Test: DayDiff5
- DayDiff(2010-01-01, new Tdate(Hstate.Uncertain)).Out =?= "Uncertain"


# DATE EQUALITY

Tbool DateEquality1(Thing c) =
	DoB(c) == 2000-01-01
	
Test: DateEquality1a
- Thing b
- DoB(b) = 2000-01-01
- Hammurabi.Sandbox.DateEquality1(b).Out =?= true

Test: DateEquality1b
- Thing b
- DoB(b) = 2002-01-01
- Hammurabi.Sandbox.DateEquality1(b).Out =?= false

Tbool DateEquality2(Thing c) =
	DoB(c) <> 2000-01-01
	
Test: DateEquality2a
- Thing b
- DoB(b) = 2000-01-01
- Hammurabi.Sandbox.DateEquality2(b).Out =?= false

Test: DateEquality2b
- Thing b
- DoB(b) = 2000-02-01
- Hammurabi.Sandbox.DateEquality2(b).Out =?= true

Tbool DateEquality3(Thing c) =
	DoB(c) < 2000-01-01

Test: DateEquality3a
- Thing b
- DoB(b) = 2000-01-01
- Hammurabi.Sandbox.DateEquality3(b).Out =?= false

Test: DateEquality3b
- Thing b
- DoB(b) = 2001-01-01
- Hammurabi.Sandbox.DateEquality3(b).Out =?= false

Test: DateEquality3c
- Thing b
- DoB(b) = 1999-01-01
- Hammurabi.Sandbox.DateEquality3(b).Out =?= true

Tbool DateEquality4(Thing c) =
	DoB(c) <= 2000-01-01
	
Test: DateEquality4a
- Thing b
- DoB(b) = 2000-01-01
- Hammurabi.Sandbox.DateEquality4(b).Out =?= true

Test: DateEquality4b
- Thing b
- DoB(b) = 2001-01-01
- Hammurabi.Sandbox.DateEquality4(b).Out =?= false

Test: DateEquality4c
- Thing b
- DoB(b) = 1999-01-01
- Hammurabi.Sandbox.DateEquality4(b).Out =?= true

Tbool DateEquality5(Thing c) =
	DoB(c) > 2000-01-01

Test: DateEquality5a
- Thing b
- DoB(b) = 2000-01-01
- Hammurabi.Sandbox.DateEquality5(b).Out =?= false

Test: DateEquality5b
- Thing b
- DoB(b) = 2001-01-01
- Hammurabi.Sandbox.DateEquality5(b).Out =?= true

Test: DateEquality5c
- Thing b
- DoB(b) = 1999-01-01
- Hammurabi.Sandbox.DateEquality5(b).Out =?= false

Tbool DateEquality6(Thing c) =
	DoB(c) >= 2000-01-01

Test: DateEquality6a
- Thing b
- DoB(b) = 2000-01-01
- Hammurabi.Sandbox.DateEquality6(b).Out =?= true

Test: DateEquality6b
- Thing b
- DoB(b) = 2001-01-01
- Hammurabi.Sandbox.DateEquality6(b).Out =?= true

Test: DateEquality6c
- Thing b
- DoB(b) = 1999-01-01
- Hammurabi.Sandbox.DateEquality6(b).Out =?= false


# TSET.CONTAINS

Tbool SetContainsThing(Thing p1, Thing p2) =
	Fam.ChildrenOf(p1).Contains(p2)

Test: 85594484
- Things t1, t2
- ChildrenOf(t1) = [[t2]]
- Hammurabi.Sandbox.SetContainsThing(t1, t2).TestOutput =?= "Time.DawnOf True "


# ASK INTERMEDIATE QUESTION BEFORE DESCENDING TREE

TboolIn Test9(Thing p) =
	set.Exists(IsUSCitizen(_))
	
	Tset set =
		TsetIn SomeRandomPeople(p)

Tbool MeetsSomeCriteria(Thing p) =
	MeetsCriteria1(p) &
	TboolIn MeetsCriteria2(p)

TboolIn? MeetsCriteria1(Thing p) = 
	TboolIn Meets1a(p) &
	TboolIn Meets1b(p)
	
	
# UNKNOWN THINGS

Tbool SomeMethod(Thing t1, Thing t2) =
	true

Thing StubThing() =
	new Thing(Hstate.Stub)

Thing UnstatedThing() =
	new Thing(Hstate.Unstated)

Thing UncertainThing() =
	new Thing(Hstate.Uncertain)
	
Test: UncertainThing1
- Thing p
- Thing q
- Sandbox.SomeMethod(p,q).Out =?= true

Test: UncertainThing2
- Sandbox.SomeMethod(Sandbox.UnstatedThing(), Sandbox.StubThing()).Out =?= "Unstated"

Test: UncertainThing3
- Sandbox.SomeMethod(Sandbox.UnstatedThing(), Sandbox.UncertainThing()).Out =?= "Unstated"

Test: UncertainThing4
- Sandbox.SomeMethod(Sandbox.StubThing(), Sandbox.UncertainThing()).Out =?= "Stub"

Test: UncertainThing5
- Thing p
- Sandbox.SomeMethod(p, Sandbox.UncertainThing()).Out =?= "Uncertain"

Test: UncertainThing6
- Thing p
- Sandbox.SomeMethod(p, Sandbox.StubThing()).Out =?= "Stub"

Test: UncertainThing7
- Thing p
- Sandbox.SomeMethod(p, Sandbox.UnstatedThing()).Out =?= "Unstated"


# INFINITE LOOPS

# Recursive rule that looks for unknown people
TboolIn IsCitizen(Thing p) =
	# >> Is {1} a citizen by law?
	TboolIn IsCitizenByLaw(p) |
	IsCitizen(TheMotherOf(p))

# >>What's the name of {1}'s mother?
Thing TheMotherOf(Thing p) =
	# >>What's the name of {1}'s mother?
	TsetIn MotherOf(p).ToThing
	
	
Test: Loop1
- Thing p
- Sandbox.IsCitizen(p).Out =?= "Unstated"

Test: Loop2
- Thing p
- Thing mom
- MotherOf(p) = [[mom]]
- Sandbox.IsCitizen(p).Out =?= "Unstated"

Test: Loop3
- Thing p
- Thing mom
- MotherOf(p) = [[mom]]
- IsCitizenByLaw(p) = false
- IsCitizenByLaw(mom) = true
- Sandbox.IsCitizen(p).Out =?= true

Test: Loop4
- Thing p
- IsCitizenByLaw(p) = true
- Sandbox.IsCitizen(p).Out =?= true

Test: Loop5
- Thing p
- IsCitizenByLaw(p) = false
- Sandbox.IsCitizen(p).Out =?= "Unstated"

Test: Loop6
- Thing p
- Thing mom
- MotherOf(p) = [[mom]]
- IsCitizenByLaw(p) = false
- IsCitizen(mom) = false
- Sandbox.IsCitizen(p).Out =?= false

Test: 864022057
- Things t1, t2
- IsCitizen(t1) = Tbool(?)
- IsCitizenByLaw(t1) = false
- Things barry
- MotherOf(t1) = [[barry]]
- IsCitizen(barry) = Tbool(?)
- IsCitizenByLaw(barry) = false
- Things monroevius
- MotherOf(barry) = [[monroevius]]
- IsCitizen(monroevius) = Tbool(?)
- IsCitizenByLaw(monroevius) = true
- Hammurabi.Sandbox.IsCitizen(t1).TestOutput =?= "Time.DawnOf True "


# TSET INPUTS

Tnum TestTsetCount(Thing p) =
	TestTset(p).Count

# >>What items are in {1}'s set?
TsetIn TestTset(Thing p)


Test: Tset1
- Thing p
- Thing joan
- TestTset(p) = [[joan]]
- Sandbox.TestTsetCount(p).Out =?= 1

Test: Tset2
- Thing p
- Thing jim
- Thing joan
- TestTset(p) = [[jim, joan]]
- Sandbox.TestTsetCount(p).Out =?= 2

Test: Tset3
- Thing p
- TestTset(p) = [[ ]]
- Sandbox.TestTsetCount(p).Out =?= 0

Test: Tset4
- Thing p
- Sandbox.TestTsetCount(p).Out =?= "Unstated"

Test: Tset5  # fail b/c doesn't output Tset data
- Thing p
- Thing jim
- Thing joan
- TestTset(p) = [[jim, joan]]
- Sandbox.TestTset(p).Out =?= "jim, joan"


# METHODS WITH THREE PARAMETERS

Tbool Another3ParamTest(Thing a, Thing b, Thing c) =
	TboolIn ABC(a,b,c)

TboolIn IsABC(Thing a, Thing b, Thing c) =
	Stub() |
	IsXYZ(a,b,c)

TboolIn IsXYZ(Thing x, Thing y, Thing z)

Test: Param3_1a
- Thing x
- Thing y
- Thing z
- IsXYZ(x,y,z) = true
- Sandbox.IsXYZ(x,y,z).Out =?= true

Test: Param3_1b
- Thing x
- Thing y
- Thing z
- IsXYZ(x,y,z) = false
- Sandbox.IsXYZ(x,y,z).Out =?= false

Test: Param3_1c
- Thing x
- Thing y
- Thing z
- Sandbox.IsXYZ(x,y,z).Out =?= "Unstated"

Test: Param3_2a
- Thing a
- Thing b
- Thing c
- ABC(a,b,c) = true
- Sandbox.Another3ParamTest(a,b,c).Out =?= true

Test: Param3_2b
- Thing a
- Thing b
- Thing c
- ABC(a,b,c) = false
- Sandbox.Another3ParamTest(a,b,c).Out =?= false

Test: Param3_2c
- Thing a
- Thing b
- Thing c
- Sandbox.Another3ParamTest(a,b,c).Out =?= "Unstated"


# TIME-VARYING BOOLEANS
	
# Time-varying boolean subrule
Tbool SomeTemporalBooleanSubrule() =
	rule
	
	Tbool rule =
		temporal:
		from Time.DawnOf -> false
		from 2000-01-01 -> true
		from 2001-01-01 -> false
		endtemporal
	
Test: TimeVaryingBooleanSub1
- Sandbox.SomeTemporalBooleanSubrule().AsOf(1999-03-09).Out =?= false

Test: TimeVaryingBooleanSub2
- Sandbox.SomeTemporalBooleanSubrule().AsOf(2000-03-09).Out =?= true

Test: TimeVaryingBooleanSub3
- Sandbox.SomeTemporalBooleanSubrule().AsOf(2002-03-09).Out =?= false		
	
	
# Time-varying boolean
Tbool SomeTemporalBoolean() =
	temporal:
	from Time.DawnOf -> false
	from 2000-01-01 -> true
	from 2001-01-01 -> false
	endtemporal
		
Test: TimeVaryingBoolean1
- Sandbox.SomeTemporalBoolean().AsOf(1999-03-09).Out =?= false

Test: TimeVaryingBoolean2
- Sandbox.SomeTemporalBoolean().AsOf(2000-03-09).Out =?= true

Test: TimeVaryingBoolean3
- Sandbox.SomeTemporalBoolean().AsOf(2002-03-09).Out =?= false		




