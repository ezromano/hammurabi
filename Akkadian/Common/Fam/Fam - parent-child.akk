# Namespace:    Hammurabi.Fam
# Summary:      Basic family relationships: parent-child
# Updated:      2012-09-08
# Author:       Michael Poulshock


# PARENT-CHILD RELATIONSHIPS

# Parents married on a particular date
Tbool ParentsMarriedAsOf(Thing p, Tdate date) =
	Fam.AreMarried(mom,dad).AsOf(date)
	
	Thing mom =
		MotherAsOf(p, date)
	
	Thing dad =
		FatherAsOf(p, date)

# Mother on a particular date
# Warning: returns null if more than one mother
Thing MotherAsOf(Thing p, Tdate date) =
	ParentsOf(p).AsOf(date).Filter(IsMotherOf(_,p)).ToThing
	
# Is mother of
Tbool IsMotherOf(Thing p1, Thing p2) =
	IsParentOf(p1,p2) &
	IsFemale(p1)

# Father on a particular date
# Warning: returns null if more than one father
Thing FatherAsOf(Thing p, Tdate date) =
	ParentsOf(p).AsOf(date).Filter(IsFatherOf(_,p)).ToThing
	
# Is father of
Tbool IsFatherOf(Thing p1, Thing p2) =
	IsParentOf(p1,p2) &
	IsMale(p1)
	
# Who are {1}'s parents?
TsetIn ParentsOf(Thing p)

Tset ParentsOfInferred(Thing p) =
	peopleBut(p).Filter(IsParentOf(_,p))
	
# Who are {1}'s children?
TsetIn ChildrenOf(Thing p)	
	
# Not strictly necessary but aids readability
Tbool IsChildOf(Thing p1, Thing p2) =
	IsParentOf(p2,p1)

# >>Is {1} {2}'s parent?
TboolIn IsParentOf(Thing p1, Thing p2) =
	ChildrenOf(p1).Contains(p2) |
	IsBiologicalParentOf(p1, p2) |
	IsAdoptiveParentOf(p1, p2) |
	IsFosterParentOf(p1, p2) |
	IsStepparentOf(p1, p2)
            
# Biological parent
Tbool IsBiologicalParentOf(Thing p1, Thing p2) =
    Relationship(p1,p2) == "Biological parent" |~
	Relationship(p2,p1) == "Biological child"

# Adoptive parent
Tbool IsAdoptiveParentOf(Thing p1, Thing p2) =
	Relationship(p1,p2) == "Adoptive parent" |~
	Relationship(p2,p1) == "Adopted child"

# Foster parent
Tbool IsFosterParentOf(Thing p1, Thing p2) =
	Relationship(p1,p2) == "Foster parent" |~
	Relationship(p2,p1) == "Foster child"

# Stepparent
Tbool IsStepparentOf(Thing p1, Thing p2) =
	Relationship(p1,p2) == "Stepparent" |~
	Relationship(p2,p1) == "Stepchild"

# >>Is/was {1} pregnant?
TboolIn IsPregnant(Thing p)

IsPregnant(1) assumes Gender(1) = "Female"

# >>Is {1} unborn (i.e. a fetus)?
TboolIn IsUnborn(Thing p)

# TODO: Prove...
# >>Is/was {1} of unknown parentage?
TboolIn IsOfUnknownParentage(Thing p)


# PATERNITY, LEGITIMATION, ETC.

# >> Was {1}'s paternity of {2} established?
Tbool PaternityEstablishedFor(Thing parent, Thing child) =
	IsMale(parent) &
	Age(parent) - Age(child) >= 12 &
	TboolIn PaternityEstablishedFor(parent,child) &
	TheTime.IsAtOrAfter(DatePaternityEstablishedFor(parent,child))
	
# >> When was {1}'s paternity of {2} established?
TdateIn DatePaternityEstablishedFor(Thing parent, Thing child)

# Born "out of wedlock"
Tbool BornOutOfWedlock(Thing p) =
	IsIllegitimate(p)
		
# >>Was {1} an illegitimate child?
TboolIn IsIllegitimate(Thing p) =
	!ParentsMarriedAsOf(p, DoB(p))
	# unless child is born shortly after the parents' divorce
	# ...married as of date of conception?

# Assumption: could be done by either statute, court, or both
# >>Is/was {1} legitimated (under the law of {1}'s domicile)?
TboolIn IsLegitimatedByLaw(Thing child)
	
# Legitimated by father (he acknowledged parental responsibility)
# Example of temporal value built from threshold facts and an event
# >>Does/did {1} legitimate {2}?
Tbool Legitimated(Thing parent, Thing child) =
	IsFatherOf(parent, child) &
	IsIllegitimate(child) &
	TboolIn Legitimated(parent,child) &
	TheTime.IsAtOrAfter(DateLegitimated(parent,child))

# >>When did {1} legitimate {2}?
TdateIn DateLegitimated(Thing parent, Thing child)
	
# >>Is/was {1} legally committed to financially supporting {2}?
Tbool CommittedToFinanciallySupport(Thing p1, Thing p2) =
	TboolIn CommittedToFinanciallySupport(p1,p2) &
	TheTime.IsAtOrAfter(DateCommittedToFinanciallySupport(p1,p2))
	
# >>When was {1} first legally committed to financially supporting {2}?
TdateIn DateCommittedToFinanciallySupport(Thing parent, Thing child)		


# UNIT TESTS

Test: 880020957
- Things t1, t2
- IsParentOf(t1,t2) = Tbool(?)
- Thing t3
- ChildrenOf(t1) = [[t2, t3]]
- Hammurabi.Fam.IsParentOf(t1, t2).TestOutput =?= "Time.DawnOf True "


