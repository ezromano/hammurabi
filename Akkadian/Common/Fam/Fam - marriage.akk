# Namespace:    Hammurabi.Fam
# Summary:      Basic family relationships relating to marriage
# Updated:      2012-08-02
# Author:       Michael Poulshock


##
Notes: These rules are not intuitive because they have to take into account
the possibility that facts related to marriage can be expressed in a number
of different ways:
  * IsMarried(p)
  * AreMarried(p,q)
  * SpousesOf(p)
  * MaritalStatus(p)
  * FamilyRelation(p,q)
  
TOOD: Could the rules below be simplified by defining IsMarried, AreMarried, and 
MaritalStatus in terms of SpousesOf (i.e. let the fact that conveys the most
information be at the bottom of the pile)?
##

# MARITAL RELATIONSHIPS

# >>Are/were {1} and {2} legally married?
TboolInSym AreMarried(Thing p1, Thing p2) =
	set: 
	if Facts.HasBeenAsserted("IsMarried",p1) & !IsMarried(p1) -> false
	if Facts.HasBeenAsserted("IsMarried",p2) & !IsMarried(p2) -> false
	if Facts.HasBeenAsserted("SpousesOf",p1) -> SpousesOf(p1).Contains(p2)
	if Facts.HasBeenAsserted("SpousesOf",p2) -> SpousesOf(p2).Contains(p1)
	else Relationship(p1,p2) == "Spouse"

FamilyRelationship(1,2) = "Spouse" assumes FamilyRelationship(2,1) = "Spouse"

# >>Who is/was {1}'s spouse(s)?
TsetIn? SpousesOf(Thing p) =
	set: 
	if !Facts.HasBeenAsserted("SpousesOf",p) & spouses.Count == 0 -> new Tset(Hstate.Unstated)
	else spouses
	
	Tset spouses = 
		Facts.EveryoneExcept(p).Filter(AreMarried(p,_))
	
# >>Is/was {1} married?
TboolIn IsMarried(Thing p) =
	MaritalStatus(p) == "Married" |
	SpousesOf(p).Count > 0 
	
# >>What is/was {1}'s marital status?
TstrIn MaritalStatus(Thing p)

# AreMarried(1,2) assumes MaritalStatus(1) = "Married"
# AreMarried(1,2) assumes MaritalStatus(2) = "Married"
IsMarried(1) assumes MaritalStatus(1) = "Married"


# GAY MARRIAGE

# One person is a man, the other a woman
Tbool OneManOneWoman(Thing p1, Thing p2) =
	...
		IsFemale(p1) &
		IsMale(p2)
	|
	...
		IsFemale(p2) &
		IsMale(p1)
		
# Gay marriage
Tbool InSameSexMarriage(Thing p1, Thing p2) =
	AreMarried(p1,p2) &
	Gender(p1) == Gender(p2)

	
# OTHER
	
# Domestic partners
Tbool IsDomesticPartnerOf(Thing p1, Thing p2) =
	Relationship(p1,p2) == "Domestic partner" |~
	Relationship(p2,p1) == "Domestic partner"

# Civil union
Tbool InCivilUnion(Thing p1, Thing p2) =
	Relationship(p1,p2) == "Partner by civil union" |~
	Relationship(p2,p1) == "Partner by civil union"
	
# Ex-spouses
Tbool ExSpouses(Thing p1, Thing p2) =
	Relationship(p1,p2) == "Former spouse" |~
	Relationship(p2,p1) == "Former spouse"
        
# >>Are/were {1} and {2} legally separated?
TboolInSym AreSeparated(Thing p1, Thing p2)
        
# >>Are/were {1} and {2} divorced?
TboolInSym AreDivorced(Thing p1, Thing p2) =
	ExSpouses(p1,p2)

# >>Is {1} a widow(er)?
TboolIn IsWidowed(Thing p)

# >>Does/did {1} have the mental capacity to marry?
TboolIn HasMentalCapacityToMarry(Thing p)


# UNIT TESTS

Test: IsMarried0
- Things t1, jon
- IsMarried(t1) = Tbool(?)
- MaritalStatus(t1) = Tstr(?)
- SpousesOf(t1) = [[jon]]
- Hammurabi.Fam.IsMarried(t1).Out =?= true

Test: IsMarried1a
- Thing p
- Thing q
- AreMarried(p,q) = true
- Fam.IsMarried(p).Out =?= true

Test: IsMarried1b
- Thing p
- Thing q
- AreMarried(q,p) = true
- Fam.IsMarried(p).Out =?= true

Test: IsMarried2
- Thing p
- Thing q
- AreMarried(p,q) = false
- Fam.IsMarried(p).Out =?= "Unstated"

Test: IsMarried3
- Thing p
- Fam.IsMarried(p).Out =?= "Unstated"

Test: IsMarried4
- Thing p
- IsMarried(p) = false
- Fam.IsMarried(p).Out =?= false

Test: IsMarried5
- Thing p
- IsMarried(p) = true
- Fam.IsMarried(p).Out =?= true

Test: IsMarried6	# fail
- Thing p
- Thing q
- SpousesOf(p) = [[q]]
- Fam.IsMarried(p).Out =?= true

Test: IsMarried7
- Thing p
- Thing q
- SpousesOf(p) = [[q]]
- Fam.IsMarried(q).Out =?= true

Test: IsMarried8
- Thing p
- MaritalStatus(p) = "Single"
- Fam.IsMarried(p).Out =?= false

Test: FamRel1
- Thing p
- Thing q
- FamilyRelationship(p,q) = "Spouse"
- Fam.AreMarried(p,q).Out =?= true

Test: FamRel2
- Thing p
- Thing q
- FamilyRelationship(p,q) = "Spouse"
- Fam.AreMarried(q,p).Out =?= true

Test: FamRel3
- Thing p
- Thing q
- FamilyRelationship(p,q) = "Parent"
- Fam.AreMarried(p,q).Out =?= false

Test: FamRel4
- Thing p
- Thing q
- Fam.AreMarried(p,q).Out =?= "Unstated"

Test: AreMarried1
- Thing p
- Thing q
- IsMarried(p) = false
- Fam.AreMarried(p,q).Out =?= false

Test: AreMarried2
- Thing p
- Thing q
- IsMarried(p) = true
- Fam.AreMarried(p,q).Out =?= "Unstated"

Test: AreMarried3a
- Thing p
- Thing q
- AreMarried(p,q) = true
- Fam.AreMarried(p,q).Out =?= true

Test: AreMarried3b
- Thing p
- Thing q
- AreMarried(p,q) = true
- Fam.AreMarried(q,p).Out =?= true

Test: AreMarried4
- Thing p
- Thing q
- AreMarried(p,q) = false
- Fam.AreMarried(p,q).Out =?= false

Test: AreMarried5
- Thing p
- Thing q
- Fam.AreMarried(p,q).Out =?= "Unstated"

Test: AreMarried6
- Thing p
- Thing q
- SpousesOf(p) = [[q]]
- Fam.AreMarried(p,q).Out =?= true

Test: AreMarried7
- Thing p
- Thing q
- SpousesOf(p) = [[q]]
- Fam.AreMarried(q,p).Out =?= true

Test: AreMarried8
- Thing p
- Thing q
- SpousesOf(p) = [[ ]]
- Fam.AreMarried(p,q).Out =?= false

Test: AreMarried9
- Thing p
- Thing q
- Thing r
- SpousesOf(p) = [[r]]
- Fam.AreMarried(p,q).Out =?= false

Test: SpousesOf1
- Thing p
- Fam.SpousesOf(p).Count.Out =?= "Unstated"

Test: SpousesOf2
- Thing p
- SpousesOf(p) = [[ ]]
- Fam.SpousesOf(p).Count.Out =?= 0

Test: SpousesOf3
- Thing p
- Thing q
- SpousesOf(p) = [[q]]
- Fam.SpousesOf(p).Count.Out =?= 1

Test: SpousesOf4
- Thing p
- Thing q
- Thing r
- SpousesOf(p) = [[q,r]]
- Fam.SpousesOf(p).Count.Out =?= 2

Test: SpousesOf5
- Thing p
- Thing q
- AreMarried(p,q) = true   
- Fam.SpousesOf(p).Count.Out =?= 1	# Note: doesn't return Unstated here

Test: SpousesOf6
- Thing p
- Thing q
- SpousesOf(p) = [[q]]
- Fam.SpousesOf(q).Count.Out =?= 1 	# Note: returns 1 even though q could have other spouses

Test: SpousesOf7a
- Thing p
- Thing q
- FamilyRelationship(p,q) = "Spouse"
- Fam.SpousesOf(p).Count.Out =?= 1

Test: SpousesOf7b
- Thing p
- Thing q
- FamilyRelationship(p,q) = "Spouse"
- Fam.SpousesOf(q).Count.Out =?= 1



