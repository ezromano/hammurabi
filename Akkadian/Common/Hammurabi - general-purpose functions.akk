# Namespace:    Hammurabi.H
# Summary:      General-purpose functions that don't need to be in the Hammurabi core
# Updated:      2012-12-25
# Author:       Michael Poulshock


# GET QUARTER

# For a given date, determine what calendar quarter it's in.
# TODO: Handle fiscal years that don't start in January.
Tnum GetQuarter(Tdate date) =
    set:
    if date.Month <= 3 -> 1
    if date.Month <= 6 -> 2
    if date.Month <= 9 -> 3
    else 4
    
    
# TEMPORAL MAP FUNCTION

# Given a Tnum function, map it along a timeline, starting at a given date
# and continuing for a given number of intervals.
# The numeric function must return a value for each input integer from 1...n. 
Tnum TemporalMap(Func<Tnum,Tnum> fcn, Tdate startDate, Tnum intervalCount, Time.IntervalType intervalType) = 
    fcn(Time.IntervalsSince(startDate, startDate.AddYears(intervalCount), intervalType))
    
    
# TEMPORAL DETERMINATIONS

# Returns true in the period during which a given date falls
# Example: DateIsInPeriod(2013-04-15, TheYear) is true for all of 2013, and otherwise false
Tbool DateIsInPeriod(Tdate date, Tnum temporalPeriod) =
    afterEvent.EverPer(temporalPeriod) &
    afterEvent.CountPastNIntervals(temporalPeriod,1) == 0
    
    Tbool afterEvent = TheTime.IsAtOrAfter(date)


# ADD THING (INSTANTIATE A NEW ONE)

# Creates a new instance of a Thing (if it doesn't already exist)
Thing AddThing(string thingID) =
    Facts.AddThing(thingID)
    
    
# ALL KNOWN PEOPLE

# All known people (in user session)
# Uses lower case to indicate uniqueness of function
Tset people() =
    Facts.AllKnownPeople()

# All known people except a given person
Tset peopleBut(Thing p1) =
    Facts.AllKnownPeople() - p1

# All known people except two given people
Tset peopleBut(Thing p1, Thing p2) =
    Facts.AllKnownPeople() - p1 - p2
    
    
    

